{
  "tests": [
    {
      "desc": "test",
      "formula": "test",
      "expectedCode": "test",
      "expectedType": "\"test\"",
      "expectedValue": "'test'",
      "variables": [["test", "'test'"]]
    },
    {
      "desc": "tuples",
      "formula": "{ formula1(1), formula2(two: 2) }",
      "expectedCode": "{formula1(1), formula2(two: 2)}",
      "expectedType": "{Int, Int}",
      "expectedValue": "{2, 4}",
      "variables": [
        ["formula1", "fn(#one: Int) => one + 1"],
        ["formula2", "fn(two: Int) => two + 2"]
      ]
    },
    {
      "desc": "arg scope",
      "formula": "f(a: 'heeey')",
      "expectedCode": "f(a: 'heeey')",
      "expectedType": "String",
      "expectedValue": "'<heeey>'",
      "variables": [["f", "fn(a: String) => \"<${a}>\""]]
    },
    {
      "desc": "formula1",
      "formula": "formula1(1)",
      "expectedCode": "formula1(1)",
      "expectedType": "Int",
      "expectedValue": "2",
      "variables": [["formula1", "fn(#one: Int) => one + 1"]]
    },
    {
      "desc": "formula2",
      "formula": "formula2(two: 2)",
      "expectedCode": "formula2(two: 2)",
      "expectedType": "Int",
      "expectedValue": "4",
      "variables": [["formula2", "fn(two: Int) => two + 2"]]
    },
    {
      "desc": "formula2",
      "formula": "formula2(two: 2)",
      "expectedCode": "formula2(two: 2)",
      "expectedType": "Int",
      "expectedValue": "4",
      "variables": [["formula2", "fn(two num: Int) => num + 2"]]
    },
    {
      "desc": "formula3",
      "formula": "formula3(1, two: 2)",
      "expectedCode": "formula3(1, two: 2)",
      "expectedType": "Int",
      "expectedValue": "3",
      "variables": [["formula3", "fn(#one: Int, two: Int) => one + two"]]
    },
    {
      "desc": "formula3",
      "formula": "formula3(two: 2, 1)",
      "expectedCode": "formula3(two: 2, 1)",
      "expectedType": "Int",
      "expectedValue": "3",
      "variables": [["formula3", "fn(#one: Int, two: Int) => one + two"]]
    },
    {
      "desc": "formula3-rev",
      "formula": "formula3(two: 2, 1)",
      "expectedCode": "formula3(two: 2, 1)",
      "expectedType": "Int",
      "expectedValue": "3",
      "variables": [["formula3", "fn(two: Int, #one: Int) => one + two"]]
    },
    {
      "desc": "formula4",
      "formula": "formula4(1)",
      "expectedCode": "formula4(1)",
      "expectedType": "Int(>=0)",
      "expectedValue": "1",
      "variables": [["formula4", "fn(...#ints: Array(Int)) => ints.length"]]
    },
    {
      "desc": "formula4",
      "formula": "formula4(1, 2)",
      "expectedCode": "formula4(1, 2)",
      "expectedType": "Int(>=0)",
      "expectedValue": "2",
      "variables": [["formula4", "fn(...#ints: Array(Int)) => ints.length"]]
    },
    {
      "desc": "formula4",
      "formula": "formula4(1, 2, 2)",
      "expectedCode": "formula4(1, 2, 2)",
      "expectedType": "Int(>=0)",
      "expectedValue": "3",
      "variables": [["formula4", "fn(...#ints: Array(Int)) => ints.length"]]
    },
    {
      "desc": "formula5",
      "formula": "formula5(5, 1, 2)",
      "expectedCode": "formula5(5, 1, 2)",
      "expectedType": "Int",
      "expectedValue": "7",
      "variables": [["formula5", "fn(#one: Int, ...#ints: Array(Int)) => one + ints.length"]]
    },
    {
      "desc": "formula6",
      "formula": "formula6(5, ints: 1)",
      "expectedCode": "formula6(5, ints: 1)",
      "expectedType": "Int",
      "expectedValue": "6",
      "variables": [["formula6", "fn(#one: Int, ...ints: Array(Int)) => one + ints.length"]]
    },
    {
      "desc": "formula6",
      "formula": "formula6(5, ints: 1, ints: 2)",
      "expectedCode": "formula6(5, ints: 1, ints: 2)",
      "expectedType": "Int",
      "expectedValue": "7",
      "variables": [["formula6", "fn(#one: Int, ...ints: Array(Int)) => one + ints.length"]]
    },
    {
      "desc": "formula6",
      "formula": "formula6(5, ints: 1, ints: 2)",
      "expectedCode": "formula6(5, ints: 1, ints: 2)",
      "expectedType": "Int",
      "expectedValue": "7",
      "variables": [
        ["formula6", "fn(#one: Int, ...ints repInts: Array(Int)) => one + repInts.length"]
      ]
    },
    {
      "desc": "formula7",
      "formula": "formula7(5, a: 1)",
      "expectedCode": "formula7(5, a: 1)",
      "expectedType": "Int",
      "expectedValue": "6",
      "variables": [
        [
          "formula7",
          "fn(#one: Int, *namedInts: Dict(Int)) => one + (namedInts['a'] ?? 0) + (namedInts['b'] ?? 0)"
        ]
      ]
    },
    {
      "desc": "formula7",
      "formula": "formula7(5, b: 2)",
      "expectedCode": "formula7(5, b: 2)",
      "expectedType": "Int",
      "expectedValue": "7",
      "variables": [
        [
          "formula7",
          "fn(#one: Int, *namedInts: Dict(Int)) => one + (namedInts['a'] ?? 0) + (namedInts['b'] ?? 0)"
        ]
      ]
    },
    {
      "desc": "formula7",
      "formula": "formula7(5)",
      "expectedCode": "formula7(5)",
      "expectedType": "Int",
      "expectedValue": "5",
      "variables": [
        [
          "formula7",
          "fn(#one: Int, *namedInts: Dict(Int)) => one + (namedInts['a'] ?? 0) + (namedInts['b'] ?? 0)"
        ]
      ]
    },
    {
      "desc": "formula7",
      "formula": "formula7(5, a: 1, b: 2)",
      "expectedCode": "formula7(5, a: 1, b: 2)",
      "expectedType": "Int",
      "expectedValue": "8",
      "variables": [
        [
          "formula7",
          "fn(#one: Int, *namedInts: Dict(Int)) => one + (namedInts['a'] ?? 0) + (namedInts['b'] ?? 0)"
        ]
      ]
    },
    {
      "desc": "formula8",
      "formula": "formula8(2, 1000, 2, two: 2, int: 10, int: 20, 100, 200, 300, a: 10, b: 20)",
      "expectedCode": "formula8(2, 1_000, 2, two: 2, int: 10, int: 20, 100, 200, 300, a: 10, b: 20)",
      "expectedType": "Int",
      "expectedValue": "41",
      "variables": [
        [
          "formula8",
          "fn(#one: Int, two: Int, ...#posInts: Array(Int), ...int repInts: Array(Int), *namedInts: Dict(Int)) => one + two + posInts.length + repInts.length + (namedInts['a'] ?? 0) + (namedInts['b'] ?? 0)"
        ]
      ]
    },
    {
      "desc": "array arguments",
      "formula": "foo(...values) -- values is an array",
      "expectedCode": "foo(...values)",
      "expectedType": "Int",
      "expectedValue": "12",
      "variables": [
        ["foo", "fn(...#numbers: Array(Int)) => (numbers[0] ?? 0) + (numbers[1] ?? 0)"],
        ["values", "[10, 2]"]
      ]
    },
    {
      "desc": "repeated named arguments",
      "formula": "foo(...values: values) -- values is an array",
      "expectedCode": "foo(...values)",
      "expectedType": "Int",
      "expectedValue": "12",
      "variables": [
        ["foo", "fn(...values: Array(Int)) => (values[0] ?? 0) + (values[1] ?? 0)"],
        ["values", "[10, 2]"]
      ]
    },
    {
      "desc": "weird",
      "formula": "let\n  num = fn(): Int => 2\n  x = num()\nin\n  x == 5 and x or 0\n",
      "only": false,
      "skip": false,
      "expectedCode": "let\n  num = fn(): Int => 2\n  x = num()\nin\n  x == 5 and x or 0\n",
      "expectedType": "0 | 5",
      "expectedValue": "0",
      "variables": []
    },
    {
      "desc": "tuple arguments",
      "formula": "let\n  user = {name: null}\nin\n  user.name?.foo",
      "only": false,
      "skip": false,
      "expectedCode": "let\n  user = {name: null}\nin\n  user.name?.foo\n",
      "expectedValue": "null",
      "variables": [
        ["foo", "fn(#a: Int, b: String) => b <> $a"],
        ["tuple", "{0, b: 'test'}"]
      ]
    },
    {
      "desc": "bits and bobs",
      "formula": "[\n]",
      "only": false,
      "skip": false,
      "expectedCode": "[]",
      "expectedValue": "[]",
      "variables": [
        ["bits", "0b11010110"],
        ["bobs", "0b1110011"]
      ]
    }
  ]
}
